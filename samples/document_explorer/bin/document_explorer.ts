#!/usr/bin/env node
import * as cdk from 'aws-cdk-lib';
import { NagSuppressions, AwsSolutionsChecks } from 'cdk-nag';

import { NetworkingStack } from '../lib/networking-stack';
import { PersistenceStack } from '../lib/persistence-stack';
import { ApiStack } from '../lib/api-stack';

const env = {
    region: process.env.CDK_DEFAULT_REGION,
    account: process.env.CDK_DEFAULT_ACCOUNT,
}
const app = new cdk.App();
cdk.Tags.of(app).add("app", "generative-ai-cdk-constructs-samples");
cdk.Aspects.of(app).add(new AwsSolutionsChecks({verbose:true}));

//-----------------------------------------------------------------------------
// Networking Layer
//-----------------------------------------------------------------------------
const network = new NetworkingStack(app, 'NetworkingStack', {env: env});
cdk.Tags.of(network).add("stacl", "network");

//-----------------------------------------------------------------------------
// Persistence Layer
//-----------------------------------------------------------------------------
const persistence = new PersistenceStack(app, 'PersistenceStack', {
  env: env,
  vpc: network.vpc,
  securityGroups: network.securityGroups,
  masterNodes: 3,
  dataNodes: 3,
  masterNodeInstanceType: 'm6g.large.search',
  dataNodeInstanceType: 'm6g.large.search',
  availabilityZoneCount: 3,
  volumeSize: 20,
  removalPolicy: cdk.RemovalPolicy.DESTROY,
});
cdk.Tags.of(persistence).add("stack", "persistence");

//-----------------------------------------------------------------------------
// API Layer
//-----------------------------------------------------------------------------
const api = new ApiStack(app, 'ApiStack', {
  env: env,
  description: '(uksb-1tupboc43) API Layer stack',
  existingOpensearchDomain: persistence.opensearchDomain,
  existingVpc: network.vpc,
  existingSecurityGroup: network.securityGroups[0],
  existingInputAssetsBucketObj: persistence.inputsAssetsBucket,
  existingProcessedAssetsBucketObj: persistence.processedAssetsBucket,
  openSearchIndexName: 'joyride',
  cacheNodeType: 'cache.r6g.xlarge',
  engine: 'redis',
  numCacheNodes: 1,
  removalPolicy: cdk.RemovalPolicy.DESTROY,
  clientUrl: 'http://localhost:8501/'
});
cdk.Tags.of(api).add("stack", "api");

//-----------------------------------------------------------------------------
// Suppress cdk-nag warnings for resources generated by aws-cdk consctructs
// References:
//    - (IAM5) ESLogGroupPolicy: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-opensearchservice/lib/domain.ts#L1717
//    - (IAM4) ServiceRole: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-logs/lib/log-retention.ts#L154
//    - (L1) Runtime: https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk-lib/aws-logs/lib/log-retention.ts#L173
//-----------------------------------------------------------------------------
NagSuppressions.addResourceSuppressions(
  persistence,
  [
    {
      id: 'AwsSolutions-IAM5', 
      reason: 'ESLogGroupPolicy managed by aws-cdk.',
      appliesTo: ['Resource::*']
    },
    {
      id: 'AwsSolutions-IAM4', 
      reason: 'ServiceRole managed by aws-cdk.',
      appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
    },
    {
      id: 'AwsSolutions-L1',
      reason: 'Runtime managed by aws-cdk.',
    }
  ],
  true
);

NagSuppressions.addResourceSuppressions(
  api,
  [
    {
      id: 'AwsSolutions-IAM5', 
      reason: 'ESLogGroupPolicy managed by aws-cdk.',
      appliesTo: ['Resource::*']
    },
    {
      id: 'AwsSolutions-IAM4', 
      reason: 'ServiceRole managed by aws-cdk.',
      appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
    }
  ],
  true
);
